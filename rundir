#!/bin/bash

# rundir
# An application directory <https://en.wikipedia.org/wiki/Application_directory>
# implementation that also allows for creating self-running archives of
# application directories.
# 
# Copyright (c) 2014 Scott Zeid <s@zeid.me>.
# Released under the X11 License:  <https://tldrlegal.com/license/x11-license>
# 
# Application directory structure:
# app-dir/
#  bin/ - (optional) this is prepended to the PATH used when running rundir.mk
#  run-here, run, run-here.mk, or run.mk - this is what's actually executed
#  <anything else you want to include>
# 
# The file to be run will be run-here, run, run-here.mk, or run.mk, in that
# order (only one will be run).  The -here variants will be executed in the
# application directory; the other ones will be run in the original working
# directory.  The .mk variants will be treated as makefiles, with the default
# target being "default" instead of all (only the first argument is looked at
# for a target name).  Make will also be passed the -B (--always-make) option.
# <application-directory>/bin, if it exists, will be prepended to the PATH
# passed to the script/makefile.  Only the non-makefile variants need to have
# their executable bits set, and only one variant needs to exist.  If multiple
# variants exist, only the first one in the order listed above will be run.
#
# Except for determining the make target name for run*.mk files, arguments are
# not treated specially.
# 
# This is also capable of producing self-extracting archives.  The default
# behavior of these archives is to extract them to a temporary directory,
# run their contents, and then delete the temporary directory.  They accept
# a few environment variables that will cancel the default behavior:
#
#  RUNDIR_SFX_EXTRACT=<dirname>:  extract to <dirname>
#  RUNDIR_SFX_LIST=1|true:  list the archive's contents
#  RUNDIR_SFX_CAT=1|true:  dump the archive to stdout
#  RUNDIR_SFX_USAGE=1|true:  print this usage message
# 
# The SFX archives are shell scripts with a GZIP-compressed TAR archive
# appended after a marker line (__ARCHIVE_FOLLOWS_IF_SFX__).
# 
# Run `rundir --help` for command-line usage information that should now be
# self-explanatory.

SCRIPT=$0
IS_SFX=0

if [ $IS_SFX -eq 0 -a "$1" = "--" ]; then
 shift
 DASH_DASH=1
else
 DASH_DASH=0
fi

main() {
 if [ $DASH_DASH -eq 0 -a $IS_SFX -eq 0 ]; then
  if [ "$1" = "--make-sfx" ]; then
   shift
   make-sfx "$@"
  elif [ "$1" = "--help" -o "$1" = "-h" ]; then
   shift
   usage "$@"
  else
   default "$@"
  fi
 else
  default "$@"
 fi
}

usage() {
 if [ $IS_SFX -eq 1 ]; then
  DIR_ARG=''
 else
  DIR_ARG='<directory> '
 fi
 if [ $IS_SFX -eq 1 ]; then
  echo "Usage: $SCRIPT [args [...]]"
  echo "The default behavior is to extract this archive to a temporary directory,"
  echo "run its contents, and then delete the temporary directory."
  echo
  echo "SFX environment variables (these cancel the default behavior):"
  echo " RUNDIR_SFX_EXTRACT=<dirname>:  extract to <dirname>"
  echo " RUNDIR_SFX_CAT=1|true:  dump the archive to stdout"
  echo " RUNDIR_SFX_USAGE=1|true:  print this usage message"
 else
  echo "Usage: $SCRIPT <directory> [args [...]]"
  echo "       $SCRIPT --make-sfx <directory> <output-file>"
  echo "       $SCRIPT -h|--help"
 fi
}

default() {
 if [ -n "$1" ]; then
  local dir=$1
  shift
  #if grep -q -v -e '/' <<< "$DIR"; then
  # DIR=./"$DIR"
  #fi
 else
  usage >&2
  return 2
 fi
 
 run "$dir" "$@"
}

run() {
 local dir=$1
 shift
 
 cd "$dir"
 if [ $? -ne 0 ]; then
  echo "$0: error: could not enter $dir" >&2
  return 127
 fi
 
 local path=$PATH
 if [ -d "$(pwd)/bin" ]; then
  path="$(pwd)/bin:$PATH"
 fi
 
 local use_make=0
 local run=
 local wd=
 if [ -e "$(realpath "run-here")" ]; then
  run="run-here"
  wd=$(pwd)
 elif [ -e "$(realpath "run")" ]; then
  run="run"
 elif [ -e "$(realpath "run-here.mk")" ]; then
  run="run-here.mk"
  wd=$(pwd)
  use_make=1
 elif [ -e "$(realpath "run.mk")" ]; then
  run="run.mk"
  use_make=1
 else
  echo "$SCRIPT: no run-here, run, run-here.mk, or run.mk in $dir" >&2
  return 127
 fi
 run=$(pwd)/"$run"
 
 if [ -z "$wd" ]; then
  cd "$OLDPWD"
 fi
 
 if [ $use_make -eq 0 ]; then
  PATH=$path "$run" "$@"
 else
  local target=
  if [ -n "$1" \
       -a -n "$(printf '%s' "$1" | grep -v -e '^-')" \
       -a -n "$(printf '%s' "$1" | grep -v -e '=')" ]; then
   target=$1
   shift
  else
   target=default
  fi
  PATH=$path make -B -f "$run" "$target" "${ARGS[@]}"
 fi
}

make-sfx() {
 if [ -z "$1" -o -z "$2" ]; then
  echo "Usage: $SCRIPT --$0 <directory> <output-file>"
  return 2
 fi
 
 IN_DIR=$1
 IN_NAME=$(basename "$IN_DIR")
 OUT_FILE=$2
 
 if [ ! -d "$(realpath "$IN_DIR")" ]; then
  echo "$0: error: $IN_DIR is not a directory or a link to one" >&2
  return 2
 fi
 
 cat "$0" \
  | sed -e 's/^IS_SFX=0$/IS_SFX=1/g' \
        -e 's/^main "\$@"$/sfx-entry "run.me" "$@"  # changed by make-sfx()/g' \
  > "$OUT_FILE"
 tar -cz -C "$IN_DIR" . >> "$OUT_FILE"
 chmod +x "$OUT_FILE"
}

sfx-entry() {
 local DIR=$1
 shift
 
 # The tar archive starts after the __ARCHIVE_FOLLOWS_IF_SFX__ line in the
 # compiled SFX
 local SKIP=`awk '/^__ARCHIVE_FOLLOWS_IF_SFX__/ { print NR + 1; exit 0; }' \$0`
 
 # Extract, cat, or print help, and then exit, if requested
 if [ -n "$RUNDIR_SFX_EXTRACT" ]; then
  sfx-extract $SKIP "$RUNDIR_SFX_EXTRACT"
  return $?
 elif [ "$RUNDIR_SFX_LIST" = "1" -o "$RUNDIR_SFX_LIST" = "true" ]; then
  sfx-cat $SKIP | tar tz
  return $?
 elif [ "$RUNDIR_SFX_CAT" = "1" -o "$RUNDIR_SFX_CAT" = "true" ]; then
  sfx-cat $SKIP
  return $?
 elif [ "$RUNDIR_SFX_HELP" = "1" -o "$RUNDIR_SFX_HELP" ]; then
  usage "$@"
  return $?
 fi
 
 # Extract temporary files
 local SFX_TMP="/tmp/rundir-sfx-$$"
 mkdir "$SFX_TMP"
 mkdir "$SFX_TMP/$DIR"
 sfx-extract $SKIP "$SFX_TMP/$DIR"

 # Allow us to clean up on Ctrl-C
 trap true SIGINT
 
 main "$SFX_TMP/$DIR" "$@"
 local RET=$?
 
 # Remove temporary files
 rm -r "$SFX_TMP"

 return $RET
}

sfx-extract() {
 # The archive's offset is really the first argument, but we hide that
 # from the user
 local DIR=$1
 shift
 
 if [ -z "$1" ]; then
  echo "Usage: $SCRIPT <output-directory>"
  return 2
 fi
 
 local OUT=$1
 mkdir -p "$OUT"
 sfx-cat | tar xz -C "$OUT"
}

sfx-cat() {
 # The archive's offset is really the first argument, but we hide that
 # from the user
 local DIR=$1
 shift
 
 tail -n +$SKIP "$SCRIPT"
}

# Do not change this line (without changing make-sfx() as well):
main "$@"

# Exit so that, if this is an SFX, the archive isn't treated as code
exit $?

# In the compiled SFX, the archive will begin after this line
__ARCHIVE_FOLLOWS_IF_SFX__
