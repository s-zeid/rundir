#!/bin/sh
# vim: set fdm=marker:

# rundir
# 
# A runnable directory <https://en.wikipedia.org/wiki/Application_directory>
# implementation that also allows for creating self-running archives of
# runnable directories.
# 
# Copyright (c) 2014-2018 Scott Zeid.
# https://code.s.zeid.me/rundir
# 
# Released under the X11 License:  <https://tldrlegal.com/license/x11-license>
# 
# 
# See <https://code.s.zeid.me/rundir/src/master/SPEC.md> for information about
# the runnable directory mechanism implemented by this program.
# 
# See <https://code.s.zeid.me/rundir/src/master/README.md> for information about
# this program.


#### Plumbing

SCRIPT=$0
IS_SFX=0

if [ $IS_SFX -eq 0 ] && [ x"$1" = x"--" ]; then
 shift
 DASH_DASH=1
else
 DASH_DASH=0
fi

# Entry point (when IS_SFX=0) {{{1

main() {
 if [ $DASH_DASH -eq 0 ] && [ $IS_SFX -eq 0 ]; then
  if [ x"$1" = x"--search-path" ] || [ x"$1" = x"-p" ]; then
   shift
   run_in_path "$@"
  elif [ x"$1" = x"--which" ] || [ x"$1" = x"-w" ]; then
   shift
   which_dir "$@"
  elif [ x"$1" = x"--make-sfx" ]; then
   shift
   make_sfx "$@"
  elif [ x"$1" = x"--help" ] || [ x"$1" = x"-h" ]; then
   shift
   usage "$@"
  else
   default "$@"
  fi
 else
  default "$@"
 fi
}

default() {
 if [ -n "$1" ]; then
  local dir=$1
  shift
 else
  usage >&2
  return 2
 fi
 
 run_dir "$dir" "$@"
}

# Usage {{{1

usage() {
 if [ $IS_SFX -eq 0 ]; then
  echo "Usage: $SCRIPT <directory> [args [...]]"
  echo "       $SCRIPT -p|--search-path <directory-in-path> [args [...]]"
  echo "       $SCRIPT -w|--which [-a|--all] [--] <directory-name> [...]"
  echo "       $SCRIPT --make-sfx [-r|--reproducible] <directory> <output-file>"
  echo "       $SCRIPT -h|--help"
 else
  echo "Usage: $SCRIPT [args [...]]"
  echo "The default behavior is to extract this archive to a temporary directory,"
  echo "run its contents, and then delete the temporary directory."
  echo
  echo "SFX environment variables..."
  echo " ... that cancel the default behavior:"
  echo "  RUNDIR_SFX_EXTRACT=<directory>:  extract to <directory>"
  echo "  RUNDIR_SFX_LIST=1|true:  list the archive's contents"
  echo "  RUNDIR_SFX_CAT=1|true:  dump the archive to stdout"
  echo "  RUNDIR_SFX_HELP=1|true:  print this usage message"
  echo "  RUNDIR_SFX_USAGE=1|true:  print this usage message"
  echo " ... that don't cancel the default behavior:"
  echo "  RUNDIR_SFX_TMP=<directory>:  use <directory> instead of /tmp"
 fi
}

# Running directories {{{1

run_dir() {
 local dir=$1
 shift
 
 if [ ! -e "$dir" ]; then
  echo "$SCRIPT: error: $dir does not exist" >&2
  return 127
 fi
 if [ ! -d "$dir" ]; then
  echo "$SCRIPT: error: $dir is not a directory" >&2
  return 127
 fi
 
 local dir_name=$dir
 
 local dir_uid=$(get_uid "$dir")
 local run_uid=
 local bin_uid=
 
 # The directory's UID needs to be known for security reasons
 if [ -z "$dir_uid" ]; then
  echo "$SCRIPT: error: could not get $dir's owner"
  return 127
 fi
 
 local orig_wd=$(pwd)
 cd "$dir"
 if [ $? -ne 0 ]; then
  echo "$0: error: could not enter $dir" >&2
  return 127
 fi
 
 local use_make=0
 local add_path=1
 local path=$PATH
 local run_name=
 local run=
 local bin=
 local wd=
 
 if [ -e "run" ]; then
  run_name="run"
 elif [ -e "run.mk" ]; then
  run_name="run.mk"
  wd=$(pwd)
  use_make=1
 elif [ -e "AppRun" ]; then
  run_name="AppRun"
  add_path=0
 else
  echo "$SCRIPT: no run, run.mk, or AppRun in $dir" >&2
  return 127
 fi
 run="$(pwd)/$run_name"
 # $run's owner must match that of $dir for security reasons
 run_uid=$(get_uid "$run")
 if [ -z "$run_uid" ]; then
  echo "$SCRIPT: error: could not get $dir_name/$run_name's owner" >&2
  return 127
 elif [ $run_uid -ne $dir_uid ]; then
  echo "$SCRIPT: error: $dir_name/$run_name's owner does not match" \
       "that of $dir_name" >&2
  return 127
 fi
 
 bin="$(pwd)/bin"
 if [ $add_path -ne 0 ] && [ -d "$bin" ]; then
  # $bin's owner must match that of $dir for security reasons
  bin_uid=$(get_uid "$bin")
  if [ -z "$bin_uid" ]; then
   echo "$SCRIPT: error: could not get $dir_name/bin's owner" >&2
   return 127
  elif [ $bin_uid -ne $dir_uid ]; then
   echo "$SCRIPT: error: $dir_name/bin's owner does not match" \
        "that of $dir_name" >&2
   return 127
  else
   path="$(pwd)/bin:$PATH"
  fi
 fi
 
 cd "$orig_wd"
 
 if [ $use_make -eq 0 ]; then
  ([ -n "$wd" ] && cd "$wd" || true;
   export PATH="$path"; exec "$run" "$@")
 else
  local target=
  if [ -n "$1" ] && \
     [ -n "$(printf '%s' "$1" | grep -v -e '^-')" ] && \
     [ -n "$(printf '%s' "$1" | grep -v -e '=')" ]; then
   target=$1
   shift
  else
   target=default
  fi
  ([ -n "$wd" ] && cd "$wd" || true;
   export PATH="$path"; exec make -B -f "$run" "$target" "$@")
 fi
}

run_in_path() {
 local dir=$1
 shift
 
 if [ x"$dir" = x"" ]; then
  echo "Usage: $SCRIPT -p|--search-path <directory-in-path> [args [...]]" >&2
  return 127
 fi
 
 local resolved=$(resolve_path "$dir")
 if [ -n "$resolved" ]; then
  run_dir "$resolved" "$@"
 else
  echo "$SCRIPT: no runnable $dir in ($PATH)" >&2
  return 127
 fi
}

# which(1) for runnable directories {{{1

which_dir() {
 local all=0
 local dash_dash=
 local n_dirs=0
 local r=0
 
 # go through arguments in 2 passes:  first sets option variables;
 # second pass performs the function's main logic
 local pass i
 for pass in 1 2; do
  dash_dash=0
  for i; do
   # parse option arguments
   # first pass sets variables; second pass ignores them
   if [ $dash_dash -eq 0 ]; then
    if [ x"$i" = x"-a" ] || [ x"$i" = x"--all" ]; then
     all=1
     continue
    elif [ x"$i" = x"--" ]; then
     dash_dash=1
     continue
    fi
   fi
   # second pass only:  print the full path for the directory named
   # in the argument
   if [ $pass -eq 2 ]; then
    n_dirs=`expr "$n_dirs" + 1`
    resolve_path "$i" "$all"
    if [ $? -eq 1 ]; then
     echo "$SCRIPT: no $i in ($PATH)" >&2
     r=`expr "$r" + 1`
    fi
   fi
  done
 done
 
 if [ $n_dirs = 0 ]; then
  echo "Usage: $SCRIPT -w|--which [-a|--all] [--] <directory-name> [...]" >&2
  r=255
 fi
 
 return $r
}

# Runnable directory logic {{{1

is_runnable_dir() {
 if [ -z "$1" ]; then
  echo "$SCRIPT:is_runnable_dir: first argument must be the directory" >&2
  return 127
 fi
 
 local dir=$1
 shift
 
 [ ! -d "$dir" ] && return 1
 [ -x "$dir/run" ] && return 0
 [ -f "$dir/run.mk" ] && return 0
 [ -x "$dir/AppRun" ] && return 0
 return 1
}

resolve_path() {
 # handle the case where the last path component is empty
 if [ x"$1" = x"" ] || (printf '%s' "$1" | grep -q -e '/$'); then
  return 1
 fi
 
 local dir=$(basename "/$1")
 local all=$2
 if [ x"$all" = x"" ] || [ x"$all" = x"0" ]; then
  all=0
 else
  all=1
 fi
 
 local r=127
 
 #local search=$PATH:
 #while [ -n "$search" ]; do
 # local i=${search%%:*}
 # local search=${search#*:}
 local oldifs=$IFS
 IFS=:
 local i
 for i in $PATH; do
  if is_runnable_dir "$i/$dir"; then
   echo "$i/$dir"
   r=0
   if [ $all -eq 0 ]; then
    break
   fi
  fi
 done
 IFS=$oldifs
 if [ $r -eq 127 ]; then
  r=1
 fi
 return $r
}

# SFX stuffs {{{1

make_sfx() {
 if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Usage: $SCRIPT --make-sfx [-r|--reproducible] <directory> <output-file>"
  return 2
 fi
 
 local reproducible=0
 if [ x"$1" = x"--reproducible" ] || [ x"$1" = x"-r" ]; then
  reproducible=1
  shift 1
 fi
 
 local in_dir=$1
 local in_name=$(basename "/$in_dir")
 local out_file=$2
 
 if [ ! -d "$in_dir" ]; then
  echo "$0: error: $in_dir is not a directory or a link to one" >&2
  return 2
 fi
 
 local tar_gnu_args=
 if [ $reproducible -ne 0 ]; then
  if ! tar_is_gnu; then
   echo "$0: error: GNU tar is required for reproducible archives" >&2
   exit 1
  fi
  
  local epoch="$(printf '%s' "$SOURCE_DATE_EPOCH" | sed -e 's/[^0-9]//g')"
  if [ x"$epoch" = x"" ]; then
   epoch=0
  fi
  
  tar_gnu_args="--sort=name --mtime=@$epoch --owner=0 --group=0 --numeric-owner"
  tar_gnu_args="$tar_gnu_args --format=oldgnu"
 fi
 
 cat "$0" \
  | sed -e 's/^IS_SFX=0$/IS_SFX=1/g' \
  > "$out_file"
 tar cz -C "$in_dir" $tar_gnu_args . >> "$out_file"
 chmod +x "$out_file"
}

sfx_entry() {
 local dir=$1
 shift
 
 # The tar archive starts after the __ARCHIVE_FOLLOWS_IF_SFX__ line in the
 # compiled SFX
 local skip=`awk '/^__ARCHIVE_FOLLOWS_IF_SFX__/ { print NR + 1; exit 0; }' "$0"`
 
 # Extract, cat, or print help, and then exit, if requested
 if [ -n "$RUNDIR_SFX_EXTRACT" ]; then
  sfx_extract "$skip" "$RUNDIR_SFX_EXTRACT"
  return $?
 elif [ x"$RUNDIR_SFX_LIST"  = x"1" ] || [ x"$RUNDIR_SFX_LIST"  = x"true" ]; then
  sfx_cat "$skip" | tar tz
  return $?
 elif [ x"$RUNDIR_SFX_CAT"   = x"1" ] || [ x"$RUNDIR_SFX_CAT"   = x"true" ]; then
  sfx_cat "$skip"
  return $?
 elif [ x"$RUNDIR_SFX_HELP"  = x"1" ] || [ x"$RUNDIR_SFX_HELP"  = x"true" ] || \
      [ x"$RUNDIR_SFX_USAGE" = x"1" ] || [ x"$RUNDIR_SFX_USAGE" = x"true" ]; then
  usage "$@"
  return $?
 fi
 
 # Determine where to put the temporary directory
 local tmp="/tmp"
 if [ -n "$RUNDIR_SFX_TMP" ]; then
  local orig_wd=$(pwd)
  cd "$RUNDIR_SFX_TMP"
  tmp=$(pwd)
  cd "$orig_wd"
 fi
 
 # Extract temporary files
 local sfx_tmp="$tmp/rundir-sfx-$$"  # this is an implementation detail
 mkdir "$sfx_tmp"
 mkdir "$sfx_tmp/$dir"
 sfx_extract "$skip" "$sfx_tmp/$dir"

 # Allow us to clean up on Ctrl-C
 trap true INT
 
 main "$sfx_tmp/$dir" "$@"
 local ret=$?
 
 # Remove temporary files
 rm -r "$sfx_tmp"

 return $ret
}

sfx_extract() {
 # The archive's offset is really the first argument, but we hide that
 # from the user
 local skip=$1
 shift
 
 if [ -z "$1" ]; then
  echo "Usage: RUNDIR_SFX_EXTRACT=1|true $SCRIPT <output-directory>"
  return 2
 fi
 
 local out=$1
 mkdir -p "$out"
 
 if tar_is_gnu && (tar --warning=_ 2>&1 | grep -q -e 'timestamp'); then
  sfx_cat "$skip" | tar xz -C "$out" --warning=no-timestamp
 else
  sfx_cat "$skip" | tar xz -C "$out"
 fi
}

sfx_cat() {
 # The archive's offset is really the first argument, but we hide that
 # from the user
 local skip=$1
 shift
 
 tail -n "+$skip" "$SCRIPT"
}

# Utilities {{{1

# This (obviously) gets the user ID of the given file/directory's owner.
# For symlinks, it looks at the owner of the symlink itself.
# Unfortunately, in order to be portable, this has to parse the output of
# `ls -d -n "$file"`, but the format of `ls -n` (like `ls -l`, but prints
# numeric IDs instead of names) is defined by POSIX, so we rely on the
# implementation being conformant.
get_uid() {
 if [ -z "$1" ]; then
  echo "$SCRIPT:get_uid: first argument must be a path" >&2
  return 127
 fi
 
 local file=$1
 shift
 
 # Try to ensure `ls` will succeed
 ls -d -n "$file" >/dev/null
 if [ $? -ne 0 ]; then
  echo "$SCRIPT:get_uid: could not get information for $file" >&2
  return 127
 fi
 
 local uid=$(ls -d -n "$file" | sed -e 's/\t/ /g; s/ \+/ /g' | cut -d ' ' -f 3)
 
 # The UID should be an integer; otherwise, we've failed
 echo "x$uid" | (grep '^x[0-9][0-9]*$' &>/dev/null)
 if [ $? -ne 0 ]; then
  echo "$SCRIPT:get_uid: could not determine the owner's UID for $file" >&2
  return 127
 fi
 
 printf '%s' "$uid"
}

tar_is_gnu() {
 local tar_version=$(tar --version 2>/dev/null | head -n 1)
 printf '%s' "$tar_version" | grep -q -e 'GNU'
}

#}}}

if [ $IS_SFX -eq 0 ]; then
 main "$@"
else
 sfx_entry "run.me" "$@"
fi

# Exit so that, if this is an SFX, the archive isn't treated as code
exit $?

# In the compiled SFX, the archive will begin after this line
__ARCHIVE_FOLLOWS_IF_SFX__
